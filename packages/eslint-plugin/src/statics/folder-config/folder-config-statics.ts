export const folderConfigStatics = {
  statics: {
    fileSuffix: '-statics.ts',
    exportSuffix: 'Statics',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'statics/[domain]/[domain]-statics.ts',
    allowedImports: [],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  contracts: {
    fileSuffix: ['-contract.ts', '.stub.ts'],
    exportSuffix: 'Contract',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'contracts/[domain]/[domain]-contract.ts',
    allowedImports: ['statics/', 'errors/', 'contracts/', 'zod', '@questmaestro/shared/@types'],
    disallowAdhocTypes: false,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: true,
  },
  guards: {
    fileSuffix: '-guard.ts',
    exportSuffix: 'Guard',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'guards/[domain]/[domain]-guard.ts',
    allowedImports: ['contracts/', 'statics/', 'errors/', 'guards/', 'transformers/'],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: true,
  },
  transformers: {
    fileSuffix: '-transformer.ts',
    exportSuffix: 'Transformer',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'transformers/[domain]/[domain]-transformer.ts',
    allowedImports: ['contracts/', 'statics/', 'errors/', 'guards/', 'transformers/'],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: true,
  },
  errors: {
    fileSuffix: '-error.ts',
    exportSuffix: 'Error',
    exportCase: 'PascalCase',
    folderDepth: 1,
    folderPattern: 'errors/[domain]/[domain]-error.ts',
    allowedImports: [],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  flows: {
    fileSuffix: ['-flow.ts', '-flow.tsx'],
    exportSuffix: 'Flow',
    exportCase: 'PascalCase',
    folderDepth: 1,
    folderPattern: 'flows/[domain]/[domain]-flow.tsx',
    allowedImports: ['responders/'],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  adapters: {
    fileSuffix: '-adapter.ts',
    exportSuffix: 'Adapter',
    exportCase: 'camelCase',
    folderDepth: 2,
    folderPattern: 'adapters/[package]/[operation]/[package]-[operation]-adapter.ts',
    allowedImports: ['node_modules', 'middleware/', 'statics/', 'contracts/', 'guards/'],
    disallowAdhocTypes: false,
    requireProxy: true,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  middleware: {
    fileSuffix: '-middleware.ts',
    exportSuffix: 'Middleware',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'middleware/[name]/[name]-middleware.ts',
    allowedImports: ['adapters/', 'middleware/', 'statics/'],
    disallowAdhocTypes: true,
    requireProxy: true,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  brokers: {
    fileSuffix: '-broker.ts',
    exportSuffix: 'Broker',
    exportCase: 'camelCase',
    folderDepth: 2,
    folderPattern: 'brokers/[domain]/[action]/[domain]-[action]-broker.ts',
    allowedImports: [
      'brokers/',
      'adapters/',
      'contracts/',
      'statics/',
      'errors/',
      'guards/',
      'transformers/',
    ],
    disallowAdhocTypes: true,
    requireProxy: true,
    allowsLayerFiles: true,
    allowRegex: false,
  },
  bindings: {
    fileSuffix: '-binding.ts',
    exportSuffix: 'Binding',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'bindings/[name]/[name]-binding.ts',
    allowedImports: [
      'brokers/',
      'state/',
      'contracts/',
      'statics/',
      'errors/',
      'guards/',
      'transformers/',
    ],
    disallowAdhocTypes: true,
    requireProxy: true,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  state: {
    fileSuffix: '-state.ts',
    exportSuffix: 'State',
    exportCase: 'camelCase',
    folderDepth: 1,
    folderPattern: 'state/[name]/[name]-state.ts',
    allowedImports: ['contracts/', 'statics/', 'errors/', 'guards/', 'transformers/'],
    disallowAdhocTypes: true,
    requireProxy: true,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  responders: {
    fileSuffix: '-responder.ts',
    exportSuffix: 'Responder',
    exportCase: 'PascalCase',
    folderDepth: 2,
    folderPattern: 'responders/[domain]/[action]/[domain]-[action]-responder.ts',
    allowedImports: [
      'widgets/',
      'brokers/',
      'bindings/',
      'state/',
      'contracts/',
      'transformers/',
      'guards/',
      'statics/',
      'errors/',
    ],
    disallowAdhocTypes: true,
    requireProxy: true,
    allowsLayerFiles: true,
    allowRegex: false,
  },
  widgets: {
    fileSuffix: ['-widget.tsx', '-widget.ts'],
    exportSuffix: 'Widget',
    exportCase: 'PascalCase',
    folderDepth: 1,
    folderPattern: 'widgets/[name]/[name]-widget.tsx',
    allowedImports: [
      'bindings/',
      'brokers/',
      'state/',
      'contracts/',
      'transformers/',
      'guards/',
      'statics/',
      'errors/',
    ],
    disallowAdhocTypes: false,
    requireProxy: true,
    allowsLayerFiles: true,
    allowRegex: false,
  },
  startup: {
    fileSuffix: '.ts',
    exportSuffix: '', // Optional - 0 or 1 exports allowed, if present must be PascalCase
    exportCase: 'PascalCase',
    folderDepth: 0,
    folderPattern: 'startup/start-[name].ts',
    allowedImports: ['*'],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  assets: {
    fileSuffix: '',
    exportSuffix: '',
    exportCase: '',
    folderDepth: 1,
    folderPattern: 'assets/[type]/[filename]',
    allowedImports: [],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: false,
  },
  migrations: {
    fileSuffix: '',
    exportSuffix: '',
    exportCase: '',
    folderDepth: 1,
    folderPattern: 'migrations/[version]/[number]-[name].sql',
    allowedImports: [],
    disallowAdhocTypes: true,
    requireProxy: false,
    allowsLayerFiles: false,
    allowRegex: false,
  },
} as const;
